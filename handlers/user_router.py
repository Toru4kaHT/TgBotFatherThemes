from create_bot import bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from database.dao.dao import UserDAO, TicketDAO
from handlers.forms import SupportForm

from keyboards.inline_keyboadrs import start_inline_kb, themes_inline_kb, tikcket_inline_kb, types_tikcket_inline_kb, accept_or_cancle_kb
user_router = Router()

# –ü—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π —Å–æ–æ–±—â–µ–Ω–∏–µ
@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)
    
    if not user:
        await UserDAO.add(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )


    caption = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üí∏<b>StariyDed</b>üí∏\n" \
              f"–ù–∞—à–∞ –∫–æ–º–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–±—Ä–µ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Ö–æ–¥\n" \
              f" –≤ —Å—Ñ–µ—Ä–µ –∞–±—É–∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–Ω–∫–æ–≤\n\n" \
              f'<b>–ü—Ä–∏—Å–æ–π–¥–µ–Ω—è–π—Å—è:</b> @ded_afafafa'
    photo_url = 'https://i.postimg.cc/xTRGR02Q/start-photo.jpg'
    await message.answer_photo(caption=caption, reply_markup=start_inline_kb(message.from_user.id), photo=photo_url)

# –í—ã–¥–∞—ë—Ç –≤—Å–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.callback_query(F.data == 'themes')
async def get_themes_list(call: CallbackQuery):
    await call.answer()
 
    text = '–£ –Ω–∞—Å –ª—É—á—à–µ–µ –∞–±—É–∑—ã –ø–æ A–ª—å—Ña –±a–Ω–∫y\n' \
           '–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º–∫–∏ –æ—Ç –¥–µ–¥—ã:'
    
    await call.message.edit_caption(caption=text, reply_markup=themes_inline_kb())


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
@user_router.callback_query(F.data == 'backtomenu')
async def go_to_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer()

    text =  f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üí∏<b>StariyDed</b>üí∏\n" \
            f"–ù–∞—à–∞ –∫–æ–º–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–±—Ä–µ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Ö–æ–¥\n" \
            f" –≤ —Å—Ñ–µ—Ä–µ –∞–±—É–∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–Ω–∫–æ–≤\n\n" \
            f'<b>–ü—Ä–∏—Å–æ–π–¥–µ–Ω—è–π—Å—è:</b> @ded_afafafa'

    await call.message.edit_caption(caption=text, reply_markup=start_inline_kb(call.from_user.id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–∏
@user_router.callback_query(F.data == 'support')
async def get_support(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    
    # text = '–ù–∞–ø–∏—à–∏ –º–Ω–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏ –Ω–∞—à–∏ –∞–¥–º–∏–Ω—ã —Å–≤—è–∂—É—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'
    # await call.message.answer(text=text)

    text = '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <i>"–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"</i>\n' \
           '–∏ –Ω–∞—à–∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24-—Ö —á–∞—Å–æ–≤'

    await call.message.edit_caption(caption=text, reply_markup=tikcket_inline_kb())

# –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
@user_router.callback_query(F.data == 'ticket')
async def get_type_ticket(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    
    text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã'
    await state.set_state(SupportForm.ticket_type)
    await call.message.edit_caption(text=text, reply_markup=types_tikcket_inline_kb())

# –§—É–Ω–∫—Ü–∏—è –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
@user_router.callback_query(F.data.startswith('sup_'), SupportForm.ticket_type)
async def get_text_ticket(call: CallbackQuery, state: FSMContext):
    await call.answer()
    problem_type = call.data.split('sup_')[1]
    await state.update_data(ticket_type=problem_type)
    
    text = f'–¢–∏–ø –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}\n\n'\
              f'–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É:'
    
    await state.set_state(SupportForm.ticket_text)

    await call.message.answer(text=text)


# –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç
@user_router.message(F.text, SupportForm.ticket_text)
async def accept_or_cancle_problem(message: Message, state: FSMContext):
    problem_text = message.text
    await state.update_data(ticket_text=problem_text)
       
    problem_data = await state.get_data()

    text = f'–¢–∏–ø –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã: {problem_data.get('ticket_type')}\n\n'\
            f'–¢–µ–∫—Å—Ç –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:\n{problem_data.get('ticket_text')}'
       
    await message.answer(text=text, reply_markup=accept_or_cancle_kb())

@user_router.callback_query(F.data == 'accept', SupportForm.ticket_text)
async def accept_problem(call: CallbackQuery, state: FSMContext):
    problem_data = await state.get_data()
    await call.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')
    await TicketDAO.add(
        user_id=call.from_user.id,
        username=call.from_user.username,
        ticket_type=problem_data.get('ticket_type'),
        ticket_text=problem_data.get('ticket_text')
    )
    await call.message.delete()


@user_router.callback_query(F.data == 'cancle')
async def cancle_problem(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')

    await call.message.delete()